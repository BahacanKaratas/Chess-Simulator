public class Board {
    private Piece[][] board=new Piece[8][8];
    private String[][] strBoard=new String[8][8];
    public Board(){
        strBoard[0][0]="a8";
        strBoard[0][1]="b8";
        strBoard[0][2]="c8";
        strBoard[0][3]="d8";
        strBoard[0][4]="e8";
        strBoard[0][5]="f8";
        strBoard[0][6]="g8";
        strBoard[0][7]="h8";
        strBoard[1][0]="a7";
        strBoard[1][1]="b7";
        strBoard[1][2]="c7";
        strBoard[1][3]="d7";
        strBoard[1][4]="e7";
        strBoard[1][5]="f7";
        strBoard[1][6]="g7";
        strBoard[1][7]="h7";
        strBoard[2][0]="a6";
        strBoard[2][1]="b6";
        strBoard[2][2]="c6";
        strBoard[2][3]="d6";
        strBoard[2][4]="e6";
        strBoard[2][5]="f6";
        strBoard[2][6]="g6";
        strBoard[2][7]="h6";
        strBoard[3][0]="a5";
        strBoard[3][1]="b5";
        strBoard[3][2]="c5";
        strBoard[3][3]="d5";
        strBoard[3][4]="e5";
        strBoard[3][5]="f5";
        strBoard[3][6]="g5";
        strBoard[3][7]="h5";
        strBoard[4][0]="a4";
        strBoard[4][1]="b4";
        strBoard[4][2]="c4";
        strBoard[4][3]="d4";
        strBoard[4][4]="e4";
        strBoard[4][5]="f4";
        strBoard[4][6]="g4";
        strBoard[4][7]="h4";
        strBoard[5][0]="a3";
        strBoard[5][1]="b3";
        strBoard[5][2]="c3";
        strBoard[5][3]="d3";
        strBoard[5][4]="e3";
        strBoard[5][5]="f3";
        strBoard[5][6]="g3";
        strBoard[5][7]="h3";
        strBoard[6][0]="a2";
        strBoard[6][1]="b2";
        strBoard[6][2]="c2";
        strBoard[6][3]="d2";
        strBoard[6][4]="e2";
        strBoard[6][5]="f2";
        strBoard[6][6]="g2";
        strBoard[6][7]="h2";
        strBoard[7][0]="a1";
        strBoard[7][1]="b1";
        strBoard[7][2]="c1";
        strBoard[7][3]="d1";
        strBoard[7][4]="e1";
        strBoard[7][5]="f1";
        strBoard[7][6]="g1";
        strBoard[7][7]="h1";
       for(int i=0;i<8;i++){
           for(int j=0;j<8;j++){
                this.board[i][j]=null;
           }
       }
    }
    public int findij(String pos){
        int returnI=0;
        int returnJ=0;
        int returnThis=0;
        for(int i=0;i<8;i++){
            for(int j=0;j<8;j++){
                if(pos.equals(strBoard[i][j])){
                    returnI=10*i;
                    returnJ=j;
                    returnThis=returnI+returnJ;
                    return returnThis;
                }
            }
        }
       return 0;
    }
    public boolean putPiece(Piece p,String pos){
        int position=findij(pos);
        int column=position%10;
        int line=position-column;
        line=line/10;
        p.setPosition(pos);
        if(board[line][column]==null){
            board[line][column]=p;
            return true;
        }
        else{
            return false;
        }
    }
    public Piece getPiece(String pos){
        int position=findij(pos);
        int column=position%10;
        int line=position-column;
        line=line/10;
        return  board[line][column];
    }
    public boolean isEmpty(String pos){
        int position=findij(pos);
        int column=position%10;
        int line=position-column;
        line=line/10;
        if(board[line][column]==null){
            return true;
        }
        else{
            return false;
        }
    }
    public boolean isPossible(String pos){
        for(int i=0;i<8;i++){
            for(int j=0;j<8;j++){
                if(strBoard[i][j].equals(pos)){
                    return true;
                }
            }
        }
        return false;
    }
    private String getStringPos(int x,int y){
        String returnThis="";
        switch(y){
            case 0:
                returnThis+="a";
                break;
            case 1:
                returnThis+="b";
                break;
            case 2:
                returnThis+="c";
                break;
            case 3:
                returnThis+="d";
                break;
            case 4:
                returnThis+="e";
                break;
            case 5:
                returnThis+="f";
                break;
            case 6:
                returnThis+="g";
                break;
            case 7:
                returnThis+="h";
                break;
        }
        x=8-x;
        returnThis+=x;
        return returnThis;
    }
    public boolean check(String color){
        King checkKing=new King("white");
        Bishop checkBishop=new Bishop("white");
        Rook checkRook=new Rook("white");
        Queen checkQueen=new Queen("white");
        Knight checkKnight=new Knight("white");
        Pawn checkPawn=new Pawn("white");
        int positionOfKing=0;
        int positionOfKingI=0;
        int positionOfKingJ=0;
        String positionOfKingStr="";
       for(int i=0;i<8;i++){
           for(int j=0;j<8;j++){
               if(board[i][j]!=null){
                   if(board[i][j].getClass().equals(checkKing.getClass())){
                       if(board[i][j].getColor().equals(color)){
                           positionOfKing=findij(board[i][j].getPosition());
                           positionOfKingJ=j;
                           positionOfKingI=i;

                           positionOfKingStr= getStringPos(i,j);
                       }
                   }
               }
           }
       }

        Piece[] opColor=new Piece[16];//max 16
        int count=0;
        for(int i=0;i<8;i++) {
            for (int j = 0; j < 8; j++) {
                if(board[i][j]!=null){
                    if((board[i][j].getColor().equals(color))){
                      continue;
                    }
                    else{
                        opColor[count]=board[i][j];
                        count++;
                    }
                }
            }
        }
        Piece[] theyCanMove=new Piece[16];
        count=0;
        for(int i=0;i<16;i++) {
            if (opColor[i] != null) {
                if (opColor[i].canMove(positionOfKingStr)){
                    if(opColor[i].getClass().equals(checkPawn.getClass())){
                        int positionOfPawn=findij(opColor[i].getPosition());
                        int positionJ=positionOfPawn%10;
                        int positionI=positionOfPawn-positionJ;
                        positionI=positionI/10;
                        if(Math.abs(positionJ-positionOfKingJ)==1){
                            theyCanMove[count] = opColor[i];
                            count++;
                        }
                    }
                    else{
                        theyCanMove[count] = opColor[i];
                        count++;
                    }
                }
            }
        }
        for(int i=0;i<16;i++){
            if(theyCanMove[i]!=null){
                if(theyCanMove[i].getClass().equals(checkKing.getClass())){
                    continue;
                }
                else{
                    if(theyCanMove[i].getClass().equals(checkPawn.getClass())){
                        return true;
                    }
                    else{
                        if(theyCanMove[i].getClass().equals(checkKnight.getClass())){
                            return true;
                        }
                        else{
                            if(theyCanMove[i].getClass().equals(checkQueen.getClass())){
                                int isEmpty1=0;
                                String[] path=theyCanMove[i].getPath(positionOfKingStr);
                                for(int find=0;find<path.length;find++){
                                    if(path[find]!=null && this.isEmpty(path[find])){
                                        continue;
                                    }
                                    else{
                                        isEmpty1++;
                                        break;
                                    }
                                }
                                if(isEmpty1==0){
                                    return true;
                                }
                            }
                            else{
                                if(theyCanMove[i].getClass().equals(checkRook.getClass())){
                                    int isEmpty2=0;
                                    String[] path=theyCanMove[i].getPath(positionOfKingStr);
                                    for(int find=0;find<path.length;find++){
                                        if(path[find]!=null && this.isEmpty(path[find])){
                                            continue;
                                        }
                                        else{
                                            isEmpty2++;
                                            break;
                                        }
                                    }
                                    if(isEmpty2==0){
                                        return true;
                                    }
                                }
                                else{
                                    if(theyCanMove[i].getClass().equals(checkBishop.getClass())){
                                        int isEmpty3=0;
                                        String[] path=theyCanMove[i].getPath(positionOfKingStr);
                                        for(int find=0;find<path.length;find++){
                                            if(path[find]!=null && this.isEmpty(path[find]) ){
                                                continue;
                                            }
                                            else{
                                                isEmpty3++;
                                                break;
                                            }
                                        }
                                        if(isEmpty3==0){
                                            return true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }
    public boolean checkMate(String color){
        if(check(color)){
       for(int i=0;i<8;i++){
           for(int j=0;j<8;j++){
               if(board[i][j]!=null){

                   if(board[i][j].getColor().equals(color)){
                       String[] allMovesOf1Piece=board[i][j].getAllMoves();
                       for(int z=0;z<allMovesOf1Piece.length;z++){
                           int newPosition=findij(allMovesOf1Piece[z]);
                           int newPositionJ=newPosition%10;
                           int newPositionI=newPosition-newPositionJ;
                           newPositionI=newPositionI/10;
                           if(board[newPositionI][newPositionJ]==null || (!board[newPositionI][newPositionJ].getColor().equals(color))){
                               Piece temp=board[i][j];
                               board[i][j]=null;
                           Piece temp2=board[newPositionI][newPositionJ];
                           board[newPositionI][newPositionJ]=temp;

                           if(!check(color)){

                               board[i][j]=temp;
                               board[newPositionI][newPositionJ]=temp2;

                               return false;
                           }
                           else{
                               board[i][j]=temp;
                               board[newPositionI][newPositionJ]=temp2;
                           }
                       }}
                   }
               }
           }
       }
       return true;
        }
       return false;
    }
}